name: CI

on:
  push:
    branches: [ master ]
  pull_request:
  # TODO: Add a scheduled job for master

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    strategy:
      fail-fast: false
      matrix:
        build: [ quick-linux, macos ]
        python-version: [3.9]
        static-link: [0, 1]
        include:

          - build: quick-linux
            os: ubuntu-18.04
            wheel-platform: linux_x86_64
            VPATH_DIR: /usr/lib/gcc/x86_64-linux-gnu/7

          - build: macos
            os: macos-10.15
            static-link: 1
            wheel-platform: macosx_10_15_x86_64
            COMPILER_OVERRIDE: /usr/local/bin/gcc-11
            VPATH_DIR: /usr/local/Cellar/gcc/11.1.0/lib/gcc/11

          - build: macos
            os: macos-10.15
            static-link: 0
            wheel-platform: macosx_10_15_x86_64
            COMPILER_OVERRIDE: /usr/local/bin/gfortran-11

          - build: manylinux
            os: ubuntu-18.04
            python-version: 3.7
            static-link: 1
            wheel-platform: manylinux2014_x86_64
            VPATH_DIR: /opt/rh/devtoolset-9/root/usr/lib/gcc/x86_64-redhat-linux/9

    env:
      RESTRAINED_ESP_FIT_RESP_STATIC: ${{ matrix.static-link }}
      RESTRAINED_ESP_FIT_RESP_COMPILER_OVERRIDE: ${{ matrix.COMPILER_OVERRIDE }}
      RESTRAINED_ESP_FIT_RESP_VPATH_DIR: ${{ matrix.VPATH_DIR }}

    steps:
    - uses: actions/checkout@v2
      with:
        # The default shallow clone isn't enough for setuptools, which inspects
        # old commit tags to determine the package version
        # https://github.com/pypa/setuptools_scm/issues/414 (closed)
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Where's docker stored?
      run: ls -R /home/runner/work/_actions/RalfG/python-wheels-manylinux-build/v0.3.3-manylinux2014_x86_64

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine auditwheel

    - name: Build sdist
      if: ${{ !startsWith(matrix.build, 'manylinux') }}
      run: python setup.py sdist

    - name: Test installing from sdist
      if: ${{ !startsWith(matrix.build, 'manylinux') }}
      run: pip install -v restrained-ESP-fit --no-index --no-binary restrained-ESP-fit -f dist/

    - name: Run the `resp` binary in lieu of tests (returns 0)
      if: ${{ !startsWith(matrix.build, 'manylinux') }}
      run: restrained_ESP_fit

    - name: Uninstall restrained-ESP-fit
      if: ${{ !startsWith(matrix.build, 'manylinux') }}
      run: pip uninstall --yes restrained-ESP-fit

    - name: Build wheels (manylinux)
      if: ${{ startsWith(matrix.build, 'manylinux') && (matrix.wheel-platform == 'manylinux2014_x86_64') }}
      uses: RalfG/python-wheels-manylinux-build@v0.3.3-manylinux2014_x86_64
      with:
        python-versions: 'cp37-cp37m'
        pip-wheel-args: '-w ./dist --no-deps --use-feature=in-tree-build'

    - name: Build wheels (host)
      if: ${{ !startsWith(matrix.build, 'manylinux') }}
      run: ${{format('python setup.py bdist_wheel --python-tag py3 --plat={0}', matrix.wheel-platform) }}

    - name: Validate the created wheel(s)
      if: ${{ startsWith(matrix.os, 'ubuntu') }}  # auditwheel is linux-only
      run: |
        # The Makefile links any non-manylinux libraries statically. However,
        # `auditwheel show` is useful to confirm that nothing slipped through.
        # It would be even better to assert that nothing needs repairing, which
        # may be possible through an exit code in the future:
        # https://github.com/pypa/auditwheel/issues/180
        #
        # Note that `auditwheel repair` would not work anyway, as it is only
        # meant for binary extensions which are later imported through the
        # interpreter.
        auditwheel show dist/*.whl

    - name: Test installing from wheel
      run: pip install -v restrained-ESP-fit --no-index --only-binary restrained-ESP-fit -f dist/

    - name: Run the `resp` binary in lieu of tests (returns 0)
      run: restrained_ESP_fit

    - name: Verify that libraries are linked into `resp` as expected
      run: |
        INSTALLED_MODULE="$(pip show restrained_ESP_fit | grep "^Location" | cut -f2 -d" ")"
        RESP_BINARY="$INSTALLED_MODULE"/restrained_ESP_fit/build/resp
        ldd "$RESP_BINARY" || otool -L "$RESP_BINARY"

    - name: Check if package passes validation for publishing to PyPI
      run: twine check dist/*
