name: CI

on:
  push:
    branches: [ master ]
  pull_request:
  # TODO: Add a scheduled job for master

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    strategy:
      fail-fast: false
      matrix:
        # build: [ quick-linux, manylinux, macos ]
        build: [ quick-linux ]
        python-version: [3.9]
        include:
          - build: quick-linux
            os: ubuntu-18.04
            WHEEL_PLAT: linux_x86_64
            VPATH_DIR: /usr/lib/gcc/x86_64-linux-gnu/7
          - build: manylinux
            python-version: 3.7
            os: ubuntu-18.04
            container: quay.io/pypa/manylinux2014_x86_64
            pybin: /opt/python/cp37-cp37m/bin/
            WHEEL_PLAT: manylinux2014_x86_64
            STATIC: 1
            VPATH_DIR: /opt/rh/devtoolset-9/root/usr/lib/gcc/x86_64-redhat-linux/9
          # - build: macos
          #   os: macos-10.15
          #   WHEEL_PLAT: macosx_10_15_x86_64
          #   STATIC: 1
          #   # Using an older gcc because newer ones actually use clang and I
          #   # wasn't able to statically link libquadmath with it.
          #   GCC_OVERRIDE: /usr/local/bin/gcc-4.9
          #   VPATH_DIR: /usr/local/Cellar/gcc@4.9/4.9.4_2/lib/gcc/4.9

    env:
      WHEEL_PLAT: ${{ matrix.WHEEL_PLAT }}
      RESTRAINED_ESP_FIT_RESP_STATIC: ${{ matrix.STATIC }}
      RESTRAINED_ESP_FIT_RESP_GCC_OVERRIDE: ${{ matrix.GCC_OVERRIDE }}
      RESTRAINED_ESP_FIT_RESP_VPATH_DIR: ${{ matrix.VPATH_DIR }}

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Configure manylinux
      if: ${{ startsWith(matrix.build, 'manylinux') }}
      run: |
        which python
        which pip
        which auditwheel
        # echo "ls ${{matrix.pybin}}"
        # ls ${{matrix.pybin}}
        echo "ls /usr/local/lib"
        ls /usr/local/lib

    - name: Install dependencies
      run: |
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib
        python -m pip install --upgrade pip
        pip install setuptools wheel twine

    - name: Install homebrew and an older gcc
      if: ${{ startsWith(matrix.os, 'macos') }}
      run: |
        brew update
        brew install gcc@4.9

    - name: Build sdist and bdist_wheel
      run: python setup.py sdist bdist_wheel --python-tag py3 --plat="$WHEEL_PLAT"

    - name: Verify that libraries are linked as expected
      run: ldd ./restrained_ESP_fit/build/resp || otool -L ./restrained_ESP_fit/build/resp

    - name: Test installing from source, which should still work if gfortran is available
      run: pip install -v restrained-ESP-fit --no-index --no-binary restrained-ESP-fit -f dist/

    - name: Run the `resp` binary in lieu of tests (returns 0)
      run: restrained_ESP_fit

    - name: Uninstall restrained-ESP-fit...
      run: pip uninstall --yes restrained-ESP-fit

    - name: ...in order to test installing from the binary wheel
      run: pip install -v restrained-ESP-fit --no-index --only-binary restrained-ESP-fit -f dist/

    - name: Run the `resp` binary in lieu of tests (returns 0)
      run: restrained_ESP_fit

    - name: Check if package passes validation for publishing to PyPI
      run: twine check dist/*
