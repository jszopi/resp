sudo: required
matrix:
  include:
    - os: linux
      dist: xenial
      language: python
      python: "3.7"
      env: PYPI_DEPLOY=0  # Linux binary wheel must be created using a manylinux docker image, see below
    - os: osx
      osx_image: xcode11.5
      language: generic
      # Use praekeltfoundation/travis-pyenv to workaround Travis not supporting
      # Python builds on MacOS out of the box. (The issue was that Python 2.7
      # was being picked up during the deploy step).
      env: PYENV_VERSION='3.7.7' PYENV_VERSION_STRING='Python 3.7.7' PYPI_DEPLOY=1
      before_install:
        - wget https://github.com/praekeltfoundation/travis-pyenv/releases/download/0.4.0/setup-pyenv.sh
        - source setup-pyenv.sh
    - os: linux
      dist: xenial
      language: python
      python: "3.7"
      services:
        - docker
      env: DOCKER_IMAGE=quay.io/pypa/manylinux2010_x86_64
           PYPI_DEPLOY=1
      install:
        - docker pull $DOCKER_IMAGE
      before_script:
        - >
            docker run --rm -v `pwd`:/io $DOCKER_IMAGE /bin/bash -xc '
            PYBIN="/opt/python/cp37-cp37m/bin/" &&
            ls /usr/lib/x86_64-linux-gnu/*fortran* &&
            "$PYBIN"/pip install pep517 &&
            auditwheel --version &&
            "$PYBIN"/pip install --upgrade auditwheel &&
            auditwheel --version &&
            "$PYBIN"/python -m pep517.build --source --binary /io/ &&
            ORIGINAL_WHEEL="$(ls /io/dist/*.whl)" &&
            auditwheel show "$ORIGINAL_WHEEL" &&
            auditwheel repair "$ORIGINAL_WHEEL" --plat manylinux2010_x86_64 -w /io/dist/ &&
            rm "$ORIGINAL_WHEEL"
            '
cache:
  - directories:
    - $HOME/.pyenv_cache
script:
  # Build if artifacts not already present (as will be the case with the
  # manylinux build, which requires post-processing in container).
  - if [[ ! -d dist ]] ; then pip install pep517 && python -m pep517.build --source --binary . ; fi
  - ls dist/
  - ls /usr/lib/x86_64-linux-gnu/*fortran*
  - python -c "import sys; import os; import subprocess; print(subprocess.run(['ldd', 'resp']).stdout)"
  - pip install -v restrained-ESP-fit --no-index --only-binary restrained-ESP-fit -f dist/
  - python -c "import sys; import os; import subprocess; print(subprocess.run(['ldd', os.path.join(sys.prefix, 'resp')]).stdout)"
  - restrained_ESP_fit  # The target `resp` binary always returns 0
  - pip install twine
  - twine check dist/*
  # TODO: Try to only deploy tagged commits (and when PYPI_DEPLOY variable is set)
  # - twine upload --skip-existing --repository-url https://test.pypi.org/legacy -u "__token__" -p "$TEST_PYPI_TOKEN" dist/*
addons:
    apt:
        packages: gfortran
    homebrew:
        packages: gfortran
